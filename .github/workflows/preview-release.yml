name: Build & Test (Preview Release)

env:
  PROJECT_NAME: Velaptor
  BUILD_CONFIG: Debug
  RELEASE_NAME: Preview

on:
  workflow_dispatch:
  push:
    branches: [ release/my-t*t-rel*se ]
  pull_request:
    types: [ synchronize ]
    branches: [ release/v*.*.* ]

jobs:
  Library_Build_And_Test:
    name: Build & Test (Library)
    runs-on: windows-latest
    environment: preview
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Restore Dependencies
      run: dotnet restore "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj"

    - name: Build
      run: dotnet build "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj" -c ${{ env.BUILD_CONFIG }} --no-restore

    - name: Execute Unit Tests
      run: dotnet test "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/${{ env.PROJECT_NAME }}Tests.csproj" -c ${{ env.BUILD_CONFIG }} --collect:"XPlat Code Coverage" --no-restore

    - name: Publish Code Coverage Results
      uses: codecov/codecov-action@v1.5.2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/TestResults/**/coverage.cobertura.xml

    - name: Publish Build Artifacts
      uses: actions/upload-artifact@v2.2.3
      with:
        name: ${{ env.PROJECT_NAME }} Build Artifacts
        path: ${{ github.workspace }}/${{ env.PROJECT_NAME }}/bin/${{ env.BUILD_CONFIG }}/net5.0
        error: There was an issue uploading the build artifact

    - name: Setup Nuget
      uses: NuGet/setup-nuget@v1.0.5

    - name: Create Nuget Package
      run: dotnet pack "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj" -o "${{ github.workspace }}" -c ${{ env.BUILD_CONFIG }}

    - name: Get Version From Project File
      id: get-version
      uses: KinsonDigital/vget@v0.2
      with:
        repo-owner-and-name: '${{ github.repository }}'
        branch: '${{ github.ref }}'
        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        user-name: 'kinsondigital@gmail.com'
        password: ${{ secrets.REPO_PASSWORD }}
    
    # - name: Publish Nuget Package
    #   run: dotnet nuget push "${{ github.workspace }}/KinsonDigital.${{ env.PROJECT_NAME }}.${{ steps.get-version.outputs.version }}.nupkg" --api-key ${{ secrets.NUGET_ORG_API_KEY }} --source https://api.nuget.org/v3/index.json

  Test_App_Build_And_Test:
    name: Build & Test (Testing App)
    runs-on: windows-latest
    environment: preview
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Restore Dependencies
      run: dotnet restore "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Testing/${{ env.PROJECT_NAME }}Testing.csproj"

    - name: Build
      run: dotnet publish "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Testing/${{ env.PROJECT_NAME }}Testing.csproj" -c ${{ env.BUILD_CONFIG }} -o ./${{ env.RELEASE_NAME }}Release --no-restore

    - name: Get Version From Project File
      id: get-version
      uses: KinsonDigital/vget@v0.2
      with:
        repo-owner-and-name: '${{ github.repository }}'
        branch: '${{ github.ref }}'
        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        user-name: 'kinsondigital@gmail.com'
        password: ${{ secrets.REPO_PASSWORD }}

    - name: Zip Release
      run: Compress-Archive -Path "./${{ env.RELEASE_NAME }}Release" -DestinationPath "${{ github.workspace }}/${{ env.RELEASE_NAME }}Release.zip"

    - name: Release Testing Application
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get-version.outputs.version }}
        body: |
          ${{ env.RELEASE_NAME }} Release [v${{ steps.get-version.outputs.version }}](https://github.com/KinsonDigital/Velaptor/tree/v${{ steps.get-version.outputs.version }})
          Execute the application in the ${{ env.RELEASE_NAME }} Release.zip file to perform manual testing.
        files: ${{ github.workspace }}/${{ env.RELEASE_NAME }}Release.zip
